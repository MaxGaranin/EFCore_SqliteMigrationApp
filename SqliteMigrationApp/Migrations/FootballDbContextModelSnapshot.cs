// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SqliteMigrationApp;

namespace SqliteMigrationApp.Migrations
{
    [DbContext(typeof(FootballDbContext))]
    partial class FootballDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085");

            modelBuilder.Entity("SqliteMigrationApp.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<string>("Street")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Persons");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("SqliteMigrationApp.Entities.Stadion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<string>("Street");

                    b.HasKey("Id");

                    b.ToTable("Stadions");
                });

            modelBuilder.Entity("SqliteMigrationApp.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CoachId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("StadionId");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("StadionId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("SqliteMigrationApp.Entities.Coach", b =>
                {
                    b.HasBaseType("SqliteMigrationApp.Entities.Person");


                    b.ToTable("Coach");

                    b.HasDiscriminator().HasValue("Coach");
                });

            modelBuilder.Entity("SqliteMigrationApp.Entities.Player", b =>
                {
                    b.HasBaseType("SqliteMigrationApp.Entities.Person");

                    b.Property<int?>("MentorId");

                    b.Property<int>("Number");

                    b.Property<int>("TeamId");

                    b.HasIndex("MentorId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamPlayer");

                    b.HasDiscriminator().HasValue("Player");
                });

            modelBuilder.Entity("SqliteMigrationApp.Entities.Team", b =>
                {
                    b.HasOne("SqliteMigrationApp.Entities.Coach", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId");

                    b.HasOne("SqliteMigrationApp.Entities.Stadion", "Stadion")
                        .WithMany()
                        .HasForeignKey("StadionId");
                });

            modelBuilder.Entity("SqliteMigrationApp.Entities.Player", b =>
                {
                    b.HasOne("SqliteMigrationApp.Entities.Player", "Mentor")
                        .WithMany()
                        .HasForeignKey("MentorId");

                    b.HasOne("SqliteMigrationApp.Entities.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
